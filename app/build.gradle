plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id "org.sonarqube" version "6.2.0.5505"
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.5'
}

repositories {
    mavenCentral()
}

dependencies {
    // Testes
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Utilit치rios
    implementation libs.guava
    implementation 'org.json:json:20240303'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'commons-io:commons-io:2.16.1'

    // Spring Boot Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Testes Spring Boot
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// test {
//     useJUnitPlatform()
//     finalizedBy jacocoTestReport
// }

// jacocoTestReport {
//     dependsOn test
//     reports {
//         xml.required = true
//         html.required = true
//     }
//     classDirectories.setFrom(
//         fileTree(
//             dir: "$projectDir/src/main/java",
//             includes: ['app/entrada-usuario/**']
//         )
//     )
// }


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'org.example.web.WebApplication'
}

springBoot {
    mainClass = 'org.example.web.WebApplication' 
}


sonar {
    properties {
        property "sonar.projectKey", "lipesanfelice_workflows"
        property "sonar.organization", "lipesanfelice"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.token", System.getenv("SONAR_TOKEN")

        // 游녢 fontes analisadas = APENAS a pasta entrada-usuario
        property "sonar.sources", "entrada-usuario"
        property "sonar.inclusions", "entrada-usuario/**/*.java"

        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.register('salvarRelatorioSonar', JavaExec) {
    group = 'sonar'
    mainClass = 'org.example.util.SonarRelatorioCli'
    classpath = sourceSets.main.runtimeClasspath
    args "lipesanfelice_workflows", System.getenv('SONAR_TOKEN') ?: '', "$projectDir/entrada-usuario/relatorio-sonar.json"
}

// app/build.gradle
tasks.register('gerarTestesIa', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.example.web.cli.GerarTestesCli'
}

configurations {
    usuarioImplementation.extendsFrom implementation
    usuarioRuntimeOnly.extendsFrom runtimeOnly
    usuarioTestImplementation.extendsFrom testImplementation
    usuarioTestRuntimeOnly.extendsFrom testRuntimeOnly
}

def dirEntrada = file('app/entrada-usuario')
def dirTestsIA = file('app/entrada-usuario/testes_explica칞칫es/tests')
def dirWork = layout.buildDirectory.dir('usuario-src').get().asFile
def dirMain = new File(dirWork, 'src/main/java')
def dirTest = new File(dirWork, 'src/test/java')

tasks.register('organizarUsuario') {
    // declare entradas/sa칤das NA CONFIGURA칂츾O
    inputs.files(fileTree(dirEntrada) { include '**/*.java' })
    inputs.files(fileTree(dirTestsIA) { include '**/*.java' })
    outputs.dir(dirWork)

    doLast {
        // limpa somente com APIs de File (sem project)
        if (dirWork.exists()) {
            dirWork.deleteDir()
        }
        dirMain.mkdirs()
        dirTest.mkdirs()

        // percorre SOMENTE os arquivos j치 declarados em inputs
        inputs.files.files.each { File origem ->
            boolean isTeste = origem.toPath().startsWith(dirTestsIA.toPath())
            File baseDestino = isTeste ? dirTest : dirMain

            String texto = origem.getText('UTF-8')
            def m = (texto =~ /(?m)^\s*package\s+([a-zA-Z0-9_.]+)\s*;/)
            String pacote = m.find() ? m.group(1) : ''
            String caminhoPacote = pacote ? pacote.replace('.', File.separator) : ''
            File destinoDir = caminhoPacote ? new File(baseDestino, caminhoPacote) : baseDestino
            destinoDir.mkdirs()
            new File(destinoDir, origem.name).setText(texto, 'UTF-8')
        }
    }
}


sourceSets {
    usuario {
        java {
            srcDirs = [dirMain]
        }
        resources.srcDirs = []
    }
    usuarioTest {
        java {
            srcDirs = [dirTest]
        }
        resources.srcDirs = []
        compileClasspath += sourceSets.usuario.output
        runtimeClasspath  += sourceSets.usuario.output
    }
}

tasks.register('compilarUsuario', JavaCompile) {
    dependsOn 'organizarUsuario'
    source = sourceSets.usuario.java
    destinationDirectory = layout.buildDirectory.dir('classes/usuario').get().asFile
    classpath = configurations.usuarioImplementation
    options.encoding = 'UTF-8'
}

// 1) Compila o main do "usuario" s칩 depois de organizarUsuario
tasks.named(sourceSets.usuario.compileJavaTaskName) {
    dependsOn 'organizarUsuario'
}

// 2) Compila o test do "usuario" s칩 depois de organizarUsuario e das classes do main
tasks.named(sourceSets.usuarioTest.compileJavaTaskName) {
    dependsOn 'organizarUsuario', tasks.named(sourceSets.usuario.classesTaskName)
}

// Prender o JaCoCo no seu Test custom
tasks.named('testUsuario', Test).configure {
    jacoco {
        // cada task Test gera um .exec pr칩prio
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
    }
}


// testUsuario s칩 roda depois que tudo acima existir
tasks.register('testUsuario', Test) {
    dependsOn tasks.named(sourceSets.usuario.classesTaskName),
              tasks.named(sourceSets.usuarioTest.classesTaskName)
    testClassesDirs = sourceSets.usuarioTest.output.classesDirs
    classpath       = sourceSets.usuarioTest.runtimeClasspath
    useJUnitPlatform()
    testLogging { events "PASSED","FAILED","SKIPPED" }
    finalizedBy 'jacocoRelatorioUsuario'
}


jacoco {
    toolVersion = '0.8.12'
}

import org.gradle.testing.jacoco.plugins.JacocoTaskExtension

tasks.register('jacocoRelatorioUsuario', JacocoReport) {
    dependsOn 'testUsuario'

    // Coleta .exec de TODOS os Test tasks (inclui testUsuario)
    executionData.setFrom(
        files(
            tasks.withType(Test).collect { t ->
                t.extensions.findByType(JacocoTaskExtension)?.destinationFile
            }
        )
    )

    classDirectories.setFrom(sourceSets.usuario.output.classesDirs)
    sourceDirectories.setFrom(sourceSets.usuario.java.srcDirs)

    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(file('app/entrada-usuario/jacoco-relatorio/html'))
        xml.outputLocation.set(file('app/entrada-usuario/jacoco-relatorio/jacoco.xml'))
    }

    doFirst {
        file('app/entrada-usuario/jacoco-relatorio/html').mkdirs()
        file('app/entrada-usuario/jacoco-relatorio').mkdirs()
    }
}



tasks.register('usuarioCobertura') {
    dependsOn 'testUsuario'
}

tasks.withType(Test).configureEach {
    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat "full"
        showStandardStreams = false
    }
}

dependencies {
    testImplementation 'org.mockito:mockito-core:5.13.0'
}



tasks.withType(JavaExec).configureEach {
    environment 'JAVA_TOOL_OPTIONS', '-Dfile.encoding=UTF-8'
}

tasks.named('test') {
    useJUnitPlatform()
}
