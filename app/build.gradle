plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id "org.sonarqube" version "6.2.0.5505"
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.5'
}

import org.gradle.testing.jacoco.plugins.JacocoTaskExtension
repositories {
    mavenCentral()
}

dependencies {
    // Testes
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // UtilitÃ¡rios
    implementation libs.guava
    implementation 'org.json:json:20240303'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'commons-io:commons-io:2.16.1'

    // Spring Boot Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Testes Spring Boot
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'org.example.web.WebApplication'
}

springBoot {
    mainClass = 'org.example.web.WebApplication' 
}


sonar {
    properties {
        property "sonar.projectKey", "lipesanfelice_workflows"
        property "sonar.organization", "lipesanfelice"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.token", System.getenv("SONAR_TOKEN")

        // ðŸ‘‡ fontes analisadas = APENAS a pasta entrada-usuario
        property "sonar.sources", "entrada-usuario"
        property "sonar.inclusions", "entrada-usuario/**/*.java"

        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.register('salvarRelatorioSonar', JavaExec) {
    group = 'sonar'
    mainClass = 'org.example.util.SonarRelatorioCli'
    classpath = sourceSets.main.runtimeClasspath
    args "lipesanfelice_workflows", System.getenv('SONAR_TOKEN') ?: '', "$projectDir/entrada-usuario/relatorio-sonar.json"
}

// app/build.gradle
tasks.register('gerarTestesIa', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.example.web.cli.GerarTestesCli'
}

configurations {
    usuarioImplementation.extendsFrom implementation
    usuarioRuntimeOnly.extendsFrom runtimeOnly
    usuarioTestImplementation.extendsFrom testImplementation
    usuarioTestRuntimeOnly.extendsFrom testRuntimeOnly
}

def dirEntrada = file('entrada-usuario')
def dirTestsIA = file('entrada-usuario/testes_explicaÃ§Ãµes/tests')
def dirWork = layout.buildDirectory.dir('usuario-src').get().asFile
def dirMain = new File(dirWork, 'src/main/java')
def dirTest = new File(dirWork, 'src/test/java')


// Mapeia imports -> coordenadas Maven padrÃ£o (ajuste versÃµes se quiser)
def mapaImports = [
    'org.apache.commons.lang3'         : 'org.apache.commons:commons-lang3:3.14.0',
    'org.apache.commons.io'            : 'commons-io:commons-io:2.16.1',
    'com.google.gson'                  : 'com.google.code.gson:gson:2.11.0',
    'com.google.common'                : 'com.google.guava:guava:33.2.1-jre',
    'org.json'                         : 'org.json:json:20240303',
    'com.fasterxml.jackson.databind'   : 'com.fasterxml.jackson.core:jackson-databind:2.17.1',
    'com.fasterxml.jackson.core'       : 'com.fasterxml.jackson.core:jackson-core:2.17.1',
    'com.fasterxml.jackson.annotation' : 'com.fasterxml.jackson.core:jackson-annotations:2.17.1',
    'org.slf4j'                        : 'org.slf4j:slf4j-api:2.0.13',
    'ch.qos.logback'                   : 'ch.qos.logback:logback-classic:1.5.6',
    'org.apache.http'                  : 'org.apache.httpcomponents.client5:httpclient5:5.3.1',
    'org.jsoup'                        : 'org.jsoup:jsoup:1.18.1',
    'org.hibernate'                    : 'org.hibernate.orm:hibernate-core:6.5.3.Final',
    'jakarta.persistence'              : 'jakarta.persistence:jakarta.persistence-api:3.1.0',
    'jakarta.validation'               : 'jakarta.validation:jakarta.validation-api:3.0.2',
    'org.apache.poi'                   : 'org.apache.poi:poi-ooxml:5.2.5'
]

tasks.register('resolverDepsUsuario') {
    // varre fontes do usuÃ¡rio
    inputs.files(fileTree(dirEntrada) { include '**/*.java' })

    // deps.txt opcional
    inputs.files(provider {
        def f = file('entrada-usuario/deps.txt')
        f.exists() ? [f] : []
    })

    // vendor/*.jar opcional (use files, nÃ£o dir)
    inputs.files(provider {
        def v = file('entrada-usuario/vendor')
        v.exists() ? fileTree(v) { include '*.jar' } : []
    })

    outputs.dir(file('entrada-usuario/libs'))

    doLast {
        def libsDir = file('entrada-usuario/libs')
        libsDir.mkdirs()

        // 1) JARs locais do usuÃ¡rio
        def vendorDir = file('entrada-usuario/vendor')
        if (vendorDir.exists()) {
            copy {
                from(vendorDir)
                include '*.jar'
                into libsDir
            }
        }

        // 2) deps.txt (coordenadas explÃ­citas)
        def coords = [] as Set
        def depsTxt = file('entrada-usuario/deps.txt')
        if (depsTxt.exists()) {
            depsTxt.readLines('UTF-8').each { line ->
                def s = line.trim()
                if (s && !s.startsWith('#')) coords << s
            }
        }

        // 3) HeurÃ­stica por imports
        def imports = [] as Set
        fileTree(dirEntrada) { include '**/*.java' }.each { f ->
            f.eachLine('UTF-8') { l ->
                def m = (l =~ /^\s*import\s+([a-zA-Z0-9_.]+)\./)
                if (m.find()) imports << m.group(1)
            }
        }
        imports.each { pkg ->
            mapaImports.findAll { k, v -> pkg.startsWith(k) }.each { k, v -> coords << v }
        }

        // 4) Resolve e copia jars
        if (!coords.isEmpty()) {
            def depObjs = coords.collect { dependencies.create(it) } as org.gradle.api.artifacts.Dependency[]
            def conf = configurations.detachedConfiguration(depObjs)
            conf.setTransitive(true)
            def filesResolved = conf.resolve()
            copy {
                from filesResolved
                into libsDir
            }
        }

        new File(libsDir, 'RESOLVIDO.txt').setText((coords.join('\n') + '\n'), 'UTF-8')
        println "resolverDepsUsuario â†’ libs geradas em ${libsDir} (${coords.size()} coords)"
    }
}

tasks.register('organizarUsuario') {
    // declare entradas/saÃ­das NA CONFIGURAÃ‡ÃƒO
    inputs.files(fileTree(dirEntrada) { include '**/*.java' })
    inputs.files(fileTree(dirTestsIA) { include '**/*.java' })
    outputs.dir(dirWork)

    doLast {
        if (dirWork.exists()) {
            dirWork.deleteDir()
        }
        dirMain.mkdirs()
        dirTest.mkdirs()

        // helpers
        def extrairPacote = { String src ->
            def m = (src =~ /(?m)^\s*package\s+([a-zA-Z0-9_.]+)\s*;/)
            m.find() ? m.group(1) : ''
        }
        def extrairNomePublico = { String src ->
            // public class|interface|enum|record Nome
            def m = (src =~ /(?m)^\s*public\s+(?:class|interface|enum|record)\s+([A-Za-z_][A-Za-z0-9_]*)\b/)
            m.find() ? m.group(1) : null
        }
        // pega tokens de Classe.metodo() usados nos testes
        def classesReferenciadasEmTestes = { String src ->
            def ignora = [
                'Assertions','Assert','System','Math','Objects','List','ArrayList','Arrays',
                'Collections','Stream','Optional','Files','Paths','Mockito','Matchers','Pattern','Matcher'
            ] as Set
            def nomes = [] as Set
            def pat = ~/(?m)([A-Z][A-Za-z0-9_]*)\s*\.\s*[A-Za-z_][A-Za-z0-9_]*\s*\(/
            def matcher = pat.matcher(src)
            while (matcher.find()) {
                def c = matcher.group(1)
                if (!ignora.contains(c)) nomes << c
            }
            return nomes
        }


        // 1) carregue tudo em memÃ³ria para decidir renomes
        def fontesUsuario = []
        def testesIA = []
        inputs.files.files.each { File origem ->
            boolean isTeste = origem.toPath().startsWith(dirTestsIA.toPath())
            String texto = origem.getText('UTF-8')
            (isTeste ? testesIA : fontesUsuario) << [file: origem, text: texto]
        }

        // 2) detecta nomes
        def nomesPublicosUsuario = fontesUsuario.collect { extrairNomePublico(it.text) }.findAll { it }
        def nomesReferenciadosTestes = classesReferenciadasEmTestes(testesIA.collect { it.text }.join("\n"))

        // 3) se houver 1 pÃºblico e 1 esperado nos testes, e forem diferentes, renomeia o texto da classe do usuÃ¡rio
        String nomePublico = (nomesPublicosUsuario ?: [null]).first()
        String nomeEsperado = (nomesReferenciadosTestes ?: [null]).first()
        boolean deveRenomear = (nomePublico && nomeEsperado && nomePublico != nomeEsperado && nomesPublicosUsuario.size()==1 && nomesReferenciadosTestes.size()==1)

        // 4) gravar arquivos no layout de build
        def gravar = { String texto, boolean isTeste ->
            String pacote = extrairPacote(texto)
            String caminhoPacote = pacote ? pacote.replace('.', File.separator) : ''
            File baseDestino = isTeste ? dirTest : dirMain
            File destinoDir = caminhoPacote ? new File(baseDestino, caminhoPacote) : baseDestino
            destinoDir.mkdirs()

            // decide nome do arquivo
            String nomePublicoLocal = extrairNomePublico(texto)
            String nomeArquivo = nomePublicoLocal ? "${nomePublicoLocal}.java" : "Arquivo_${System.nanoTime()}.java"
            new File(destinoDir, nomeArquivo).setText(texto, 'UTF-8')
        }

        // se precisar renomear, faz replace no texto da ÃšNICA classe pÃºblica do usuÃ¡rio
        if (deveRenomear) {
            fontesUsuario = fontesUsuario.collect { f ->
                if (extrairNomePublico(f.text) == nomePublico) {
                    def novoTexto = f.text.replaceFirst(
                        /(?m)(^\s*public\s+(?:class|interface|enum|record)\s+)${java.util.regex.Pattern.quote(nomePublico)}\b/,
                        "\$1${nomeEsperado}"
                    )
                    [file: f.file, text: novoTexto]
                } else {
                    f
                }
            }

            println "organizarUsuario â†’ renomeado classe pÃºblica '${nomePublico}' â†’ '${nomeEsperado}' para alinhar com os testes"
        }

        // grava tudo
        fontesUsuario.each { gravar(it.text, false) }
        testesIA.each     { gravar(it.text, true)  }

        println "organizarUsuario â†’ copiado para main: ${dirMain.absolutePath}"
        println "organizarUsuario â†’ copiado para test: ${dirTest.absolutePath}"
        println "organizarUsuario â†’ fontes recebidos: ${fontesUsuario.size()}"
        println "organizarUsuario â†’ testes recebidos:  ${testesIA.size()}"
        if (nomePublico)  println "organizarUsuario â†’ nome pÃºblico (usuario): ${nomePublico}"
        if (nomeEsperado) println "organizarUsuario â†’ nome esperado (testes): ${nomeEsperado}"
    }

}


sourceSets {
    usuario {
        java {
            srcDirs = [dirMain]
        }
        resources.srcDirs = []
    }
    usuarioTest {
        java {
            srcDirs = [dirTest]
        }
        resources.srcDirs = []
        compileClasspath += sourceSets.usuario.output
        runtimeClasspath  += sourceSets.usuario.output
    }
}

// compila main sÃ³ depois de organizar e resolver libs
tasks.named(sourceSets.usuario.compileJavaTaskName) {
    dependsOn 'organizarUsuario', 'resolverDepsUsuario'
}

// compila testes sÃ³ depois de organizar, resolver libs e compilar main
tasks.named(sourceSets.usuarioTest.compileJavaTaskName) {
    dependsOn 'organizarUsuario', 'resolverDepsUsuario', tasks.named(sourceSets.usuario.classesTaskName)
}


// REGISTRO do testUsuario (substitua seu bloco atual por este)
tasks.register('testUsuario', Test) {
    dependsOn tasks.named(sourceSets.usuario.classesTaskName),
              tasks.named(sourceSets.usuarioTest.classesTaskName)

    testClassesDirs = sourceSets.usuarioTest.output.classesDirs
    classpath       = sourceSets.usuarioTest.runtimeClasspath
    useJUnitPlatform()

    // Log resumido no fim: quantos testes rodaram
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Resumo testUsuario -> total: ${result.testCount}, "\
                  + "passaram: ${result.successfulTestCount}, "\
                  + "falharam: ${result.failedTestCount}, "\
                  + "skipped: ${result.skippedTestCount}"
        }
    }

    // Gravar o .exec sempre no mesmo lugar
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/testUsuario.exec").get().asFile
    }

    finalizedBy 'jacocoRelatorioUsuario'
}

jacoco {
    toolVersion = '0.8.12'
}

// JacocoReport lendo EXATAMENTE o .exec do testUsuario
tasks.register('jacocoRelatorioUsuario', JacocoReport) {
    dependsOn 'testUsuario'

    // pega somente o .exec do testUsuario
    executionData.setFrom(layout.buildDirectory.file("jacoco/testUsuario.exec"))

    classDirectories.setFrom(sourceSets.usuario.output.classesDirs)
    sourceDirectories.setFrom(sourceSets.usuario.java.srcDirs)

    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(file('entrada-usuario/jacoco-relatorio/html'))
        xml.outputLocation.set(file('entrada-usuario/jacoco-relatorio/jacoco.xml'))
    }

    doFirst {
        file('entrada-usuario/jacoco-relatorio').mkdirs()
        file('entrada-usuario/jacoco-relatorio/html').mkdirs()
    }
}



tasks.register('usuarioCobertura') {
    dependsOn 'testUsuario'
}

tasks.withType(Test).configureEach {
    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat "full"
        showStandardStreams = false
    }
}

dependencies {
    usuarioTestImplementation platform('org.junit:junit-bom:5.10.2')
    usuarioTestImplementation 'org.junit.jupiter:junit-jupiter'
    usuarioTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    usuarioImplementation fileTree('entrada-usuario/libs') { include '*.jar' }
    testImplementation 'org.mockito:mockito-core:5.13.0'
}

tasks.withType(JavaExec).configureEach {
    environment 'JAVA_TOOL_OPTIONS', '-Dfile.encoding=UTF-8'
}

tasks.named('test') {
    useJUnitPlatform()
}
