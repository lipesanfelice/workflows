plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.5'
    id "org.sonarqube" version "6.2.0.5505"     // ✅ Sonar de volta
}

group = 'org.example'
version = '1.0.0'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

/** ===== Dependências básicas ===== */
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly  'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
test { useJUnitPlatform() }

/** ===== Caminhos do usuário (testes gerados) ===== */
def entradaDir = (findProperty('app.entrada.diretorio') ?: 'entrada-usuario').toString()
def testesGeradosDir = "${entradaDir}/testes_explicações/tests"
def relatorioJacocoDir = "${entradaDir}/jacoco-relatorio"

/** ===== SourceSet separado p/ testes gerados ===== */
sourceSets {
    create("usuarioTest") {
        java.srcDir file(testesGeradosDir)
        resources.srcDir file(testesGeradosDir)
        compileClasspath += sourceSets.main.output + configurations.testImplementation + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}
configurations {
    usuarioTestImplementation.extendsFrom testImplementation
    usuarioTestRuntimeOnly.extendsFrom testRuntimeOnly
}

/** ===== Task de testes gerados + JaCoCo (.exec dedicado) ===== */
tasks.register('usuarioTest', Test) {
    group = 'verification'
    description = 'Executa os testes gerados pela IA (sourceSet usuarioTest).'
    testClassesDirs = sourceSets.usuarioTest.output.classesDirs
    classpath       = sourceSets.usuarioTest.runtimeClasspath
    useJUnitPlatform()

    extensions.configure(JacocoTaskExtension) {
        destinationFile = layout.buildDirectory.file("jacoco/usuarioTest.exec").get().asFile
    }

    doFirst {
        if (!file(testesGeradosDir).exists()) {
            logger.lifecycle("Diretório de testes gerados não existe: ${testesGeradosDir}. Criando vazio…")
            file(testesGeradosDir).mkdirs()
        }
    }
}

/** ===== Relatório JaCoCo (XML + HTML) p/ usuarioTest ===== */
tasks.register('jacocoUsuarioReport', JacocoReport) {
    group = 'verification'
    description = 'Gera relatório JaCoCo para usuarioTest.'
    dependsOn tasks.named('usuarioTest')

    executionData.setFrom(fileTree(dir: "${buildDir}/jacoco", include: ["*.exec"]))
    sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(sourceSets.main.output)

    reports {
        xml.required = true
        html.required = true
        csv.required = false
        xml.outputLocation = layout.projectDirectory.file("${relatorioJacocoDir}/jacoco.xml")
        html.outputLocation = layout.projectDirectory.dir("${relatorioJacocoDir}/html")
    }
    doFirst { file(relatorioJacocoDir).mkdirs() }
}

/** ===== Atalho: cobertura única ===== */
tasks.register('covUsuario') {
    group = 'verification'
    description = 'Executa usuarioTest e gera relatório JaCoCo em entrada-usuario/jacoco-relatorio/.'
    dependsOn 'classes', 'usuarioTest', 'jacocoUsuarioReport'
}

/** ===== SonarQube (opcional, lido do ambiente) ===== */
sonar {
    def sonarHost = System.getenv('SONAR_HOST_URL') ?: 'https://sonarcloud.io'
    def sonarKey  = System.getenv('SONAR_PROJECT_KEY') ?: ''
    def sonarOrg  = System.getenv('SONAR_ORGANIZATION') ?: ''
    properties {
        property 'sonar.host.url', sonarHost
        if (sonarKey) property 'sonar.projectKey', sonarKey
        if (sonarOrg) property 'sonar.organization', sonarOrg

        // Código-fonte alvo da análise
        property 'sonar.sources', 'src/main/java'
        // (opcional) incluir testes gerados como "tests"
        property 'sonar.tests', "${testesGeradosDir}"

        // Caminho do relatório JaCoCo que geramos em covUsuario
        property 'sonar.coverage.jacoco.xmlReportPaths', "${relatorioJacocoDir}/jacoco.xml"

        // Evitar ruído de arquivos gerados
        property 'sonar.exclusions', 'src/test/**, **/generated/**'

        // Encoding
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}

/** Garantir que o sonar tenha o jacoco.xml pronto */
tasks.named('sonar').configure {
    dependsOn tasks.named('jacocoUsuarioReport')
}
