name: Java CI with Gradle

# no topo do workflow ou do job:
permissions:
  contents: write


concurrency:
  group: gen-tests-${{ github.ref }}
  cancel-in-progress: true
  


on:
  push:
    paths:
      - 'app/entrada-usuario/**'
  pull_request:
    paths:
      - 'app/entrada-usuario/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0            # necessário para o pull --rebase funcionar
        persist-credentials: true # mantém o token para o git push


    - name: Configurar Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Cache do Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Conceder permissão para o wrapper
      run: chmod +x gradlew

    # - name: Compilar e testar (somente entrada-usuario)
    #   run: ./gradlew clean build jacocoTestReport

    # - name: Enviar cobertura para Codecov (somente entrada-usuario)
    #   uses: codecov/codecov-action@v4
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     files: app/build/reports/jacoco/test/jacocoTestReport.xml
    #     fail_ci_if_error: true

    # - name: Análise com SonarQube (somente entrada-usuario)
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   run: |
    #     ./gradlew clean build
    #     ./gradlew sonar

    - name: SonarQube (somente entrada-usuario)
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./gradlew clean build
        ./gradlew -p app -Dsonar.token=$SONAR_TOKEN sonar
    
    - name: Extrair métricas Sonar → relatorio-sonar.json
      working-directory: app
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: lipesanfelice_workflows
        SONAR_OUTPUT_DIR: ${{ github.workspace }}/app/entrada-usuario
      run: ../gradlew bootRun --args='--acao=extrair-sonar --spring.main.web-application-type=none'

    - name: Conferir e imprimir conteúdo
      env:
        ARQ: ${{ github.workspace }}/app/entrada-usuario/relatorio-sonar.json
      run: |
        set -euo pipefail
        ls -la "$(dirname "$ARQ")" || true
        test -s "$ARQ"
        echo "OK: arquivo presente"
        echo "Tamanho (bytes): $(wc -c < "$ARQ")"
        python3 - <<'PY'
        import os, json
        p = os.environ["ARQ"]
        t = open(p,'r',encoding='utf-8').read()
        try:
          j = json.loads(t)
          print(json.dumps(j, ensure_ascii=False, indent=2))
        except Exception:
          print(t)
        PY

    - name: Backup fora do repo
      env:
        ARQ: ${{ github.workspace }}/app/entrada-usuario/relatorio-sonar.json
        BKP: ${{ runner.temp }}/relatorio-sonar.json
      run: |
        set -euo pipefail
        cp -f "$ARQ" "$BKP"
        echo "SONAR_JSON=$ARQ" >> $GITHUB_ENV
        echo "SONAR_JSON_BKP=$BKP" >> $GITHUB_ENV

    - name: Restaurar se arquivo sumir
      if: always()
      run: |
        set -euo pipefail
        if [ ! -s "$SONAR_JSON" ] && [ -s "$SONAR_JSON_BKP" ]; then
          mkdir -p "$(dirname "$SONAR_JSON")"
          cp -f "$SONAR_JSON_BKP" "$SONAR_JSON"
          echo "Restaurado a partir do backup"
        fi
        ls -la "$(dirname "$SONAR_JSON")" || true

    - name: Publicar relatorio-sonar.json
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: relatorio-sonar
        path: ${{ env.SONAR_JSON }}
        if-no-files-found: error
        retention-days: 30

    - name: Conferir entradas
      run: |
        test -f "${{ github.workspace }}/app/entrada-usuario/relatorio-sonar.json" || (echo "faltando relatorio-sonar.json" && exit 1)
        test -d "${{ github.workspace }}/app/entrada-usuario" || (echo "faltando pasta de código entrada-usuario/java" && exit 1)
    
    - name: Garantir e limpar pasta de testes gerados
      run: |
        TESTS_DIR="${{ github.workspace }}/app/entrada-usuario/testes_explicações"
        mkdir -p "$TESTS_DIR/tests" "$TESTS_DIR/explicacoes"
        find "$TESTS_DIR" -mindepth 1 -maxdepth 1 -exec rm -rf {} +
        echo "Pasta preparada: $TESTS_DIR"

    - name: Gerar testes via IA (Groq)
      env:
        IA_PROVEDOR: groq
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        GROQ_MODELO: llama-3.1-8b-instant
        SONAR_RELATORIO_JSON: ${{ github.workspace }}/app/entrada-usuario/relatorio-sonar.json
        CODIGO_FONTE_DIR: ${{ github.workspace }}/app/entrada-usuario
      run: |
        ./gradlew -p app bootRun --args='--acao=gerar-testes --spring.main.web-application-type=none --app.entrada.diretorio=${{ github.workspace }}/app/entrada-usuario'

    - name: Conferir testes gerados
      run: |
        echo "Arquivos gerados:"
        find "${{ github.workspace }}/app/entrada-usuario/testes_explicações/tests" -type f -name "*.java" | sed -n '1,200p'
        echo "Relatório:"
        cat "${{ github.workspace }}/app/entrada-usuario/testes_explicações/relatorio.txt" || true

    # opcional: rodar testes + cobertura agora
    # - name: Testes + JaCoCo
    #   run: ./gradlew -p app test jacocoTestReport

    - name: Commit e push dos arquivos gerados
      if: ${{ github.event_name != 'pull_request' }}
      env:
        BRANCH: ${{ github.ref_name }}
      run: |
        set -euo pipefail
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

        # Garante branch local rastreando o remoto
        git fetch origin "$BRANCH" --prune
        git checkout -B "$BRANCH" "origin/$BRANCH" || git checkout -B "$BRANCH"

        # Atualiza a árvore ANTES de commitar, mesmo com alterações locais (autostash)
        git pull --rebase --autostash origin "$BRANCH" || true

        # Stage + commit apenas do diretório gerado
        git add -A app/entrada-usuario/testes_explicações

        if git diff --cached --quiet; then
          echo "Sem mudanças para commit."
          exit 0
        fi

        msg="chore(tests): atualizar testes gerados pela IA [skip ci] - run ${{ github.run_number }} @ ${{ github.sha }}"
        git commit -m "$msg"

        # Se o remoto avançou entre o pull e o commit, rebase novamente
        git pull --rebase --autostash origin "$BRANCH" || true

        # Push com retry
        for i in 1 2; do
          if git push origin "HEAD:$BRANCH"; then
            echo "Push concluído"
            exit 0
          fi
          echo "Push falhou, tentando novamente após rebase..."
          git pull --rebase --autostash origin "$BRANCH" || true
          sleep 2
        done

        echo "Falha ao fazer push após rebase/retry"
        exit 1

